-- 1164. Product Price at a Given Date
-- Table: Products
-- +---------------+---------+-------------+
-- | Column Name   | Type    | Description |
-- +---------------+---------+-------------+
-- | product_id    | int     | Unique product identifier |
-- | new_price     | int     | Updated price of product |
-- | change_date   | date    | Date when price was updated |
-- +---------------+---------+-------------+
-- (product_id, change_date) is the PRIMARY KEY.

-- Problem:
-- Each row indicates a price change for a product.
-- Initially, all products have a price of 10.
-- Find the prices of all products on the date '2019-08-16'.

-- Example:
-- Input:
-- +------------+-----------+-------------+
-- | product_id | new_price | change_date |
-- +------------+-----------+-------------+
-- | 1          | 20        | 2019-08-14  |
-- | 2          | 50        | 2019-08-14  |
-- | 1          | 30        | 2019-08-15  |
-- | 1          | 35        | 2019-08-16  |
-- | 2          | 65        | 2019-08-17  |
-- | 3          | 20        | 2019-08-18  |
-- +------------+-----------+-------------+
--
-- Output:
-- +------------+-------+
-- | product_id | price |
-- +------------+-------+
-- | 1          | 35    |
-- | 2          | 50    |
-- | 3          | 10    |
-- +------------+-------+

-- ✅ Approach:
-- 1️⃣ Select the latest price for each product *on or before* 2019-08-16.
-- 2️⃣ If no price record exists before that date, assign the default price = 10.
-- 3️⃣ Use a LEFT JOIN to include all product_ids.

-- ✅ Solution:
SELECT p1.product_id,
       COALESCE(
           (
               SELECT p2.new_price
               FROM Products p2
               WHERE p2.product_id = p1.product_id
                 AND p2.change_date <= '2019-08-16'
               ORDER BY p2.change_date DESC
               LIMIT 1
           ), 10
       ) AS price
FROM (SELECT DISTINCT product_id FROM Products) p1;

-- Explanation:
-- COALESCE() → returns the most recent price if available, otherwise default 10.
-- ORDER BY change_date DESC → gets the last price change before or on the target date.
-- DISTINCT → ensures each product appears once in result.
